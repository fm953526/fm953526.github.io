[{"__type__":"cc.AnimationClip","_name":"animation_Dice_4","_objFlags":0,"_native":"","sample":60,"speed":1,"wrapMode":1,"events":[],"_duration":2,"_keys":[[0,2]],"_stepness":0,"_curves":[{"modifiers":["eulerAngles"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":45,"y":0,"z":45},{"__type__":"cc.Vec3","x":-1080,"y":-50,"z":-1170}],"easingMethods":{"0":"cubicOut"}}}],"_commonTargets":[],"_hash":1556646607},{"__type__":"cc.EffectAsset","_name":"builtin-standard","_objFlags":0,"_native":"","techniques":[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs:vert|standard-fs:frag","properties":{"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16,"handleInfo":["albedo",0,16]},"albedoScale":{"value":[1,1,1],"type":15,"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"value":[1],"type":13,"handleInfo":["pbrParams",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["pbrParams",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["pbrParams",2,13]},"normalStrenth":{"value":[1],"type":13,"handleInfo":["pbrParams",3,13]},"emissive":{"value":[0,0,0,1],"type":16},"emissiveScale":{"value":[1,1,1],"type":15,"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"program":"builtin-standard|standard-vs:vert|standard-fs:frag","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16,"handleInfo":["albedo",0,16]},"albedoScale":{"value":[1,1,1],"type":15,"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"value":[1],"type":13,"handleInfo":["pbrParams",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["pbrParams",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["pbrParams",2,13]},"normalStrenth":{"value":[1],"type":13,"handleInfo":["pbrParams",3,13]},"emissive":{"value":[0,0,0,1],"type":16},"emissiveScale":{"value":[1,1,1],"type":15,"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]}],"shaders":[{"hash":3284921961,"glsl3":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_weights;\nin vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nuniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\n#if USE_VERTEX_COLOR\n  in vec3 a_color;\n  out vec3 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nin vec2 a_texCoord;\nout vec2 v_uv;\nin vec2 a_texCoord1;\nout vec2 v_uv1;\n#if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING\n  out vec2 v_luv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING\n    v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform CCForwardLight {\n  highp vec4 cc_sphereLitPos[2];\n  vec4 cc_sphereLitSizeRange[2];\n  vec4 cc_sphereLitColor[2];\n  highp vec4 cc_spotLitPos[2];\n  vec4 cc_spotLitSizeRangeAngle[2];\n  vec4 cc_spotLitDir[2];\n  vec4 cc_spotLitColor[2];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_LIGHTMAP\n  in vec2 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.OCCLUSION_CHANNEL;\n    pbr.y *= res.ROUGHNESS_CHANNEL;\n    pbr.z *= res.METALLIC_CHANNEL;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, METALLIC_ROUGHNESS_UV);\n    pbr.z *= metallicRoughness.METALLIC_CHANNEL;\n    pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  #if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING\n    vec4 lighting = texture(cc_lightingMap, v_luv);\n    float fAmb = 0.5 - s.normal.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    vec3 finalColor = (ambDiff.rgb * s.albedo.rgb);\n    finalColor += lighting.rgb *  s.albedo.rgb;\n    finalColor = finalColor * s.occlusion;\n    finalColor += s.emissive;\n    color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;\n  #endif\n  return CCFragOutput(color);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture2D(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\nuniform highp vec4 cc_lightingMapUVParam;\n#endif\nuniform vec4 tilingOffset;\n#if USE_VERTEX_COLOR\n  attribute vec3 a_color;\n  varying vec3 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nattribute vec2 a_texCoord1;\nvarying vec2 v_uv1;\n#if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING\n  varying vec2 v_luv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING\n    v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  #ifdef GL_EXT_shader_texture_lod\n    #extension GL_EXT_shader_texture_lod : enable\n  #endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp vec4 cc_sphereLitPos[2];\nuniform vec4 cc_sphereLitSizeRange[2];\nuniform vec4 cc_sphereLitColor[2];\nuniform highp vec4 cc_spotLitPos[2];\nuniform vec4 cc_spotLitSizeRangeAngle[2];\nuniform vec4 cc_spotLitDir[2];\nuniform vec4 cc_spotLitColor[2];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nuniform vec4 pbrParams;\nuniform vec4 emissive;\nuniform vec4 emissiveScaleParam;\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_LIGHTMAP\n  varying vec2 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.OCCLUSION_CHANNEL;\n    pbr.y *= res.ROUGHNESS_CHANNEL;\n    pbr.z *= res.METALLIC_CHANNEL;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, METALLIC_ROUGHNESS_UV);\n    pbr.z *= metallicRoughness.METALLIC_CHANNEL;\n    pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  #if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING\n    vec4 lighting = texture2D(cc_lightingMap, v_luv);\n    float fAmb = 0.5 - s.normal.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    vec3 finalColor = (ambDiff.rgb * s.albedo.rgb);\n    finalColor += lighting.rgb *  s.albedo.rgb;\n    finalColor = finalColor * s.occlusion;\n    finalColor += s.emissive;\n    color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;\n  #endif\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":[]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"USE_LIGHTMAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean"},{"name":"PBR_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean"},{"name":"METALLIC_ROUGHNESS_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"EMISSIVE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b"]},{"name":"ROUGHNESS_CHANNEL","type":"string","options":["g","b","r"]},{"name":"METALLIC_CHANNEL","type":"string","options":["b","r","g"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]}],"blocks":[{"name":"Constants","members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"albedoMap","type":28,"count":1,"defines":["USE_ALBEDO_MAP"],"binding":31},{"name":"normalMap","type":28,"count":1,"defines":["USE_NORMAL_MAP"],"binding":32},{"name":"pbrMap","type":28,"count":1,"defines":["USE_PBR_MAP"],"binding":33},{"name":"metallicRoughnessMap","type":28,"count":1,"defines":["USE_METALLIC_ROUGHNESS_MAP"],"binding":34},{"name":"occlusionMap","type":28,"count":1,"defines":["USE_OCCLUSION_MAP"],"binding":35},{"name":"emissiveMap","type":28,"count":1,"defines":["USE_EMISSIVE_MAP"],"binding":36}],"attributes":[{"name":"a_position","type":15,"count":1,"defines":[],"format":32,"location":0},{"name":"a_normal","type":15,"count":1,"defines":[],"format":32,"location":1},{"name":"a_tangent","type":16,"count":1,"defines":[],"format":43,"location":2},{"name":"a_vertexId","type":13,"count":1,"defines":["CC_USE_MORPH"],"format":11,"location":3},{"name":"a_weights","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":4},{"name":"a_joints","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":5},{"name":"a_jointAnimInfo","type":16,"count":1,"precision":"highp ","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"],"format":43,"isInstanced":true,"location":6},{"name":"a_matWorld0","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":7},{"name":"a_matWorld1","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":8},{"name":"a_matWorld2","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":9},{"name":"a_dyn_batch_id","type":13,"count":1,"defines":["!USE_INSTANCING","USE_BATCHING"],"format":11,"location":10},{"name":"a_color","type":15,"count":1,"defines":["USE_VERTEX_COLOR"],"format":32,"location":11},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":12},{"name":"a_texCoord1","type":14,"count":1,"defines":[],"format":21,"location":13}],"record":null,"name":"builtin-standard|standard-vs:vert|standard-fs:frag"}],"combinations":[]},{"__type__":"cc.SpriteFrame","content":{"name":"rules_2","atlas":"","rect":{"x":0,"y":0,"width":979,"height":1532},"offset":{"x":0,"y":0},"originalSize":{"width":979,"height":1532},"rotated":false,"capInsets":[0,0,0,0],"texture":"2e4f4a16-762c-45b6-9729-fe323ed3bed9@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"close","atlas":"","rect":{"x":1,"y":1,"width":70,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":72,"height":72},"rotated":false,"capInsets":[0,0,0,0],"texture":"4a6cb447-ace8-480a-adda-58cdd409671d@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"branches_1","atlas":"","rect":{"x":0,"y":0,"width":435,"height":336},"offset":{"x":0,"y":0},"originalSize":{"width":435,"height":336},"rotated":false,"capInsets":[0,0,0,0],"texture":"4e85949e-8213-4935-ab00-3d4d9125bec3@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"moon","atlas":"","rect":{"x":0,"y":0,"width":489,"height":460},"offset":{"x":0,"y":0},"originalSize":{"width":489,"height":460},"rotated":false,"capInsets":[0,0,0,0],"texture":"5f8141fd-f6c7-4160-a758-6a159ffb17ee@6c48a"}},{"__type__":"cc.Mesh","_name":"","_objFlags":0,"_native":".bin","_struct":{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15360,"length":2472,"count":1236,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":15360,"count":320,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":43,"isNormalized":false}]}],"minPosition":{"__type__":"cc.Vec3","x":-0.1913760006427765,"y":-2.8610230629055877e-8,"z":-0.1927817016839981},"maxPosition":{"__type__":"cc.Vec3","x":0.1913760006427765,"y":0.1600894033908844,"z":0.19278159737586975}},"_dataLength":17832,"_hash":346073609},{"__type__":"cc.AnimationClip","_name":"animation_Dice_3","_objFlags":0,"_native":"","sample":40,"speed":1,"wrapMode":1,"events":[],"_duration":3,"_keys":[[0,3]],"_stepness":0,"_curves":[{"modifiers":["eulerAngles"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":-45,"y":0,"z":-45},{"__type__":"cc.Vec3","x":1170,"y":50,"z":1080}],"easingMethods":{"0":"cubicOut"}}}],"_commonTargets":[],"_hash":1407405714},{"__type__":"cc.AnimationClip","_name":"animation_Dice_1","_objFlags":0,"_native":"","sample":40,"speed":1,"wrapMode":1,"events":[],"_duration":3,"_keys":[[0,3]],"_stepness":0,"_curves":[{"modifiers":["eulerAngles"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":-45,"y":0,"z":-45},{"__type__":"cc.Vec3","x":990,"y":-20,"z":1080}],"easingMethods":{"0":"cubicOut"}}}],"_commonTargets":[],"_hash":4051300868},{"__type__":"cc.AnimationClip","_name":"animation_Dice_6","_objFlags":0,"_native":"","sample":60,"speed":1,"wrapMode":1,"events":[],"_duration":2,"_keys":[[0,2]],"_stepness":0,"_curves":[{"modifiers":["eulerAngles"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":45,"y":0,"z":45},{"__type__":"cc.Vec3","x":-1080,"y":-70,"z":-1080}],"easingMethods":{"0":"cubicOut"}}}],"_commonTargets":[],"_hash":1138964810},{"__type__":"cc.AnimationClip","_name":"animation_Bowl","_objFlags":0,"_native":"","sample":60,"speed":1,"wrapMode":1,"events":[],"_duration":0.5,"_keys":[[0,0.5],[0,0.5]],"_stepness":0,"_curves":[{"modifiers":["position"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":0,"y":0,"z":-10},{"__type__":"cc.Vec3","x":0,"y":0,"z":0}],"easingMethods":{}}},{"modifiers":["eulerAngles"],"data":{"keys":1,"values":[{"__type__":"cc.Vec3","x":0,"y":0,"z":0},{"__type__":"cc.Vec3","x":1080,"y":0,"z":0}],"easingMethods":{}}}],"_commonTargets":[],"_hash":1523388677},{"__type__":"cc.AnimationClip","_name":"animation_Dice_2","_objFlags":0,"_native":"","sample":45,"speed":1,"wrapMode":1,"events":[],"_duration":2.6666666666666665,"_keys":[[0,2.6666666666666665]],"_stepness":0,"_curves":[{"modifiers":["eulerAngles"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":45,"y":0,"z":45},{"__type__":"cc.Vec3","x":-1080,"y":20,"z":-990}],"easingMethods":{"0":"cubicOut"}}}],"_commonTargets":[],"_hash":1514072642},{"__type__":"cc.SpriteFrame","content":{"name":"startGame_2","atlas":"","rect":{"x":0,"y":0,"width":368,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":368,"height":108},"rotated":false,"capInsets":[0,0,0,0],"texture":"7435d25b-69f3-4f61-9e15-31c5acb20f2f@6c48a"}},{"__type__":"cc.AnimationClip","_name":"animation_Dice_5","_objFlags":0,"_native":"","sample":40,"speed":1,"wrapMode":1,"events":[],"_duration":3,"_keys":[[0,3]],"_stepness":0,"_curves":[{"modifiers":["eulerAngles"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":-45,"y":0,"z":-45},{"__type__":"cc.Vec3","x":1080,"y":70,"z":1260}],"easingMethods":{"0":"cubicOut"}}}],"_commonTargets":[],"_hash":2073317768},{"__type__":"cc.PhysicMaterial","_name":"","_objFlags":0,"_native":"","_friction":0.09,"_restitution":0.8},{"__type__":"cc.EffectAsset","_name":"builtin-unlit","_objFlags":0,"_native":"","techniques":[{"name":"opaque","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16},"colorScale":{"value":[1,1,1],"type":15,"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"transparent","passes":[{"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16},"colorScale":{"value":[1,1,1],"type":15,"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"add","passes":[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16},"colorScale":{"value":[1,1,1],"type":15,"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"alpha-blend","passes":[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16},"colorScale":{"value":[1,1,1],"type":15,"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]}],"shaders":[{"hash":2113725771,"glsl3":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_weights;\nin vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\n#if USE_TEXTURE\n  in vec2 a_texCoord;\n  out vec2 v_uv;\n  uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  position = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(position);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(position);\n  #endif\n  mat4 matWorld;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if FLIP_UV\n      v_uv.y = 1.0 - v_uv.y;\n    #endif\n    v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nuniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return CCFragOutput(o);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture2D(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\n#if USE_TEXTURE\n  attribute vec2 a_texCoord;\n  varying vec2 v_uv;\n  uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  position = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(position);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(position);\n  #endif\n  mat4 matWorld;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if FLIP_UV\n      v_uv.y = 1.0 - v_uv.y;\n    #endif\n    v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nuniform vec4 mainColor;\nuniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture2D(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"FLIP_UV","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]}],"blocks":[{"name":"TexCoords","members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"],"binding":0},{"name":"Constant","members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"mainTexture","type":28,"count":1,"defines":["USE_TEXTURE"],"binding":31}],"attributes":[{"name":"a_position","type":15,"count":1,"defines":[],"format":32,"location":0},{"name":"a_vertexId","type":13,"count":1,"defines":["CC_USE_MORPH"],"format":11,"location":1},{"name":"a_weights","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":2},{"name":"a_joints","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":3},{"name":"a_jointAnimInfo","type":16,"count":1,"precision":"highp ","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"],"format":43,"isInstanced":true,"location":4},{"name":"a_matWorld0","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":5},{"name":"a_matWorld1","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":6},{"name":"a_matWorld2","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":7},{"name":"a_dyn_batch_id","type":13,"count":1,"defines":["!USE_INSTANCING","USE_BATCHING"],"format":11,"location":8},{"name":"a_color","type":16,"count":1,"defines":["USE_VERTEX_COLOR"],"format":43,"location":9},{"name":"a_texCoord","type":14,"count":1,"defines":["USE_TEXTURE"],"format":21,"location":10}],"record":null,"name":"builtin-unlit|unlit-vs:vert|unlit-fs:frag"}],"combinations":[]},[{"__type__":"cc.SceneAsset","_name":"","_objFlags":0,"_native":"","scene":{"__id__":1},"asyncLoadAssets":false},{"__type__":"cc.Scene","_name":"","_objFlags":0,"_parent":null,"_children":[{"__id__":2},{"__id__":3},{"__id__":4},{"__id__":16},{"__id__":29}],"_active":true,"_components":[],"_prefab":null,"autoReleaseAssets":false,"_globals":{"__type__":"cc.SceneGlobals","ambient":{"__type__":"cc.AmbientInfo","_skyColor":{"__type__":"cc.Color","r":0,"g":0,"b":0,"a":1},"_skyIllum":20000,"_groundAlbedo":{"__type__":"cc.Color","r":51,"g":51,"b":51,"a":255}},"planarShadows":{"__type__":"cc.PlanarShadowInfo","_enabled":false,"_normal":{"__type__":"cc.Vec3","x":0,"y":1,"z":0},"_distance":0,"_shadowColor":{"__type__":"cc.Color","r":0,"g":0,"b":0,"a":76}},"_skybox":{"__type__":"cc.SkyboxInfo","_envmap":null,"_isRGBE":false,"_enabled":false,"_useIBL":false}},"_id":"a7c36a15-e2bb-4e5b-ad04-01798bf68f42"},{"__type__":"cc.Node","_name":"Main Light","_objFlags":0,"_parent":{"__id__":1},"_children":[],"_active":true,"_components":[{"__type__":"cc.DirectionalLightComponent","_name":"Main Light<DirectionalLightComponent>","_objFlags":0,"node":{"__id__":2},"_enabled":true,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_useColorTemperature":false,"_colorTemperature":6550,"_staticSettings":{"__type__":"cc.StaticLightSettings","_editorOnly":false,"_bakeable":false,"_castShadow":false},"_illuminance":65000,"_id":"597uMYCbhEtJQc0ffJlcgA"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":1,"z":0},"_lrot":{"__type__":"cc.Quat","x":-0.49999999999999994,"y":0,"z":0,"w":0.8660254037844387},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":-60,"y":0,"z":0},"_id":"c0y6F5f+pAvI805TdmxIjx"},{"__type__":"cc.Node","_name":"Camera","_objFlags":0,"_parent":{"__id__":1},"_children":[],"_active":true,"_components":[{"__type__":"cc.CameraComponent","_name":"Camera<CameraComponent>","_objFlags":0,"node":{"__id__":3},"_enabled":true,"_projection":1,"_priority":0,"_fov":45,"_fovAxis":0,"_orthoHeight":10,"_near":1,"_far":20,"_color":{"__type__":"cc.Color","r":51,"g":51,"b":51,"a":255},"_depth":1,"_stencil":0,"_clearFlags":6,"_rect":{"__type__":"cc.Rect","x":0,"y":0,"width":1,"height":1},"_aperture":19,"_shutter":7,"_iso":0,"_screenScale":1,"_visibility":1822425087,"_targetTexture":null,"_id":"7dWQTpwS5LrIHnc1zAPUtf"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":4.703,"z":3.402},"_lrot":{"__type__":"cc.Quat","x":-0.42261826174069944,"y":0,"z":0,"w":0.9063077870366499},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":-50,"y":0,"z":0},"_id":"c9DMICJLFO5IeO07EPon7U"},{"__type__":"cc.Node","_name":"BackGroundCamera","_objFlags":0,"_parent":{"__id__":1},"_children":[{"__id__":5}],"_active":true,"_components":[{"__type__":"cc.CameraComponent","_name":"Camera<CameraComponent>","_objFlags":0,"node":{"__id__":4},"_enabled":true,"_projection":0,"_priority":-1,"_fov":45,"_fovAxis":0,"_orthoHeight":10,"_near":1,"_far":1000,"_color":{"__type__":"cc.Color","r":0,"g":0,"b":0,"a":255},"_depth":1,"_stencil":0,"_clearFlags":7,"_rect":{"__type__":"cc.Rect","x":0,"y":0,"width":1,"height":1},"_aperture":19,"_shutter":7,"_iso":0,"_screenScale":1,"_visibility":1822425087,"_targetTexture":null,"_id":"0ee2LhqSlLLIO89c+ccYCy"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":15,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"d17Jv94klDxYMpA9IBtkXx"},{"__type__":"cc.Node","_name":"Canvas","_objFlags":0,"_parent":{"__id__":4},"_children":[{"__id__":6},{"__id__":7},{"__id__":8},{"__id__":9},{"__id__":10},{"__id__":11},{"__id__":12},{"__id__":13},{"__id__":27},{"__id__":25}],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"Canvas<UITransformComponent>","_objFlags":0,"node":{"__id__":5},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":720,"height":1280},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"ecsUUcAO5GPbpnzGOPzSWx"},{"__type__":"cc.CanvasComponent","_name":"Canvas<CanvasComponent>","_objFlags":0,"node":{"__id__":5},"_enabled":true,"_priority":0,"_targetTexture":null,"_clearFlag":0,"_color":{"__type__":"cc.Color","r":0,"g":0,"b":0,"a":0},"_renderMode":1,"_id":"32YGNsIyVHw73CTetESmfz"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":360,"y":640,"z":1},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"36sqwBDpNFb553l68AmBI6"},{"__type__":"cc.Node","_name":"bgSprite","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":6},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":720,"height":1280},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"20FrFlu/hH3Ipil/grz2FJ"},{"__type__":"cc.SpriteComponent","_name":"","_objFlags":0,"node":{"__id__":6},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"c6319984-cd3c-4609-a4e9-34bc6c54b8cc@f9941"},"_type":0,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"60V1ZOQwFDOociS7G9SY5/"},{"__type__":"cc.WidgetComponent","_name":"Sprite<WidgetComponent>","_objFlags":0,"node":{"__id__":6},"_enabled":true,"_alignFlags":45,"_target":null,"_left":0,"_right":0,"_top":0,"_bottom":0,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":720,"_originalHeight":1280,"_alignMode":2,"_lockFlags":0,"_id":"d36WPx1wtA1bRXvqQ7EAR+"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"faecCu0ilLOLNoYIycndSj"},{"__type__":"cc.Node","_name":"branches_1Sprite","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":7},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":479,"height":448},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"62VXZmLtlIfbNyHoOa0KIW"},{"__type__":"cc.SpriteComponent","_name":"","_objFlags":0,"node":{"__id__":7},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"ee58a173-3ae3-4860-b2a8-c744d0ef9c0d@f9941"},"_type":0,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"f6Cpsz9M9M+aIrMcPWBrfc"},{"__type__":"cc.WidgetComponent","_name":"Sprite-004<WidgetComponent>","_objFlags":0,"node":{"__id__":7},"_enabled":true,"_alignFlags":33,"_target":null,"_left":0,"_right":0,"_top":300,"_bottom":416,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":479,"_originalHeight":448,"_alignMode":2,"_lockFlags":0,"_id":"83YoUiIadFVY9L1Nnfr8t+"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":240.25,"y":228,"z":-1},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":0.5,"y":0.5,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"a1gCPO01JMGaF/lca+fCJK"},{"__type__":"cc.Node","_name":"branches_2Sprite","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"Sprite-006<UITransformComponent>","_objFlags":0,"node":{"__id__":8},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":435,"height":336},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"38kSv/a41IP7nQbtN8pem+"},{"__type__":"cc.SpriteComponent","_name":"Sprite-006<SpriteComponent>","_objFlags":0,"node":{"__id__":8},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"4e85949e-8213-4935-ab00-3d4d9125bec3@f9941"},"_type":0,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"2aIflII+9Oq6yTPcq+qK0V"},{"__type__":"cc.WidgetComponent","_name":"Sprite-004<WidgetComponent>","_objFlags":0,"node":{"__id__":8},"_enabled":true,"_alignFlags":9,"_target":null,"_left":0,"_right":285,"_top":300,"_bottom":472,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":435,"_originalHeight":336,"_alignMode":2,"_lockFlags":0,"_id":"90K6h3UlBBNrPg6ICJzYOT"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":-251.25,"y":256,"z":-1},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":0.5,"y":0.5,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"e90R5tRjJFcb12EVEtKEhx"},{"__type__":"cc.Node","_name":"moonSprite","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":9},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":489,"height":460},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"ffDiWZRDRAvIIEo2ebzvax"},{"__type__":"cc.SpriteComponent","_name":"","_objFlags":0,"node":{"__id__":9},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"5f8141fd-f6c7-4160-a758-6a159ffb17ee@f9941"},"_type":0,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"3cSKITLYNOoJM1nG96O8u2"},{"__type__":"cc.WidgetComponent","_name":"Sprite-001<WidgetComponent>","_objFlags":0,"node":{"__id__":9},"_enabled":true,"_alignFlags":17,"_target":null,"_left":0.21041667,"_right":115.5,"_top":0,"_bottom":0,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":false,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":0,"_alignMode":2,"_lockFlags":0,"_id":"d4sHM28lxFPronneQafEtp"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":410,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"38zYiU1gVA6KfW5CVIrsmr"},{"__type__":"cc.Node","_name":"title_1Sprite","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":10},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":667,"height":201},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"adawQUzC5JAaVwEKGNX9Mz"},{"__type__":"cc.SpriteComponent","_name":"","_objFlags":0,"node":{"__id__":10},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"f4a4fb18-71e2-48ed-beb7-0728a056ff65@f9941"},"_type":0,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"d92zkSrOdNT5qfEjqp8m4R"},{"__type__":"cc.WidgetComponent","_name":"Sprite-002<WidgetComponent>","_objFlags":0,"node":{"__id__":10},"_enabled":true,"_alignFlags":17,"_target":null,"_left":0,"_right":0,"_top":100,"_bottom":0,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":0,"_alignMode":2,"_lockFlags":0,"_id":"6aYSpIxVZD15oPFjMWZcDD"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":439.5,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"ba2HshnC5FC5eKQ8KISUYw"},{"__type__":"cc.Node","_name":"title_2Sprite","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":11},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":160,"height":160},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"a7V2zue1dDeL0KkumJ4iod"},{"__type__":"cc.SpriteComponent","_name":"","_objFlags":0,"node":{"__id__":11},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"0527046a-eace-4045-89b4-6ab3ba5e316b@f9941"},"_type":0,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"fd/8LZTaVEYYo6JEYIDRVF"},{"__type__":"cc.WidgetComponent","_name":"Sprite-003<WidgetComponent>","_objFlags":0,"node":{"__id__":11},"_enabled":true,"_alignFlags":17,"_target":null,"_left":0,"_right":0,"_top":100,"_bottom":0,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":0,"_alignMode":2,"_lockFlags":0,"_id":"03Dpm2AINH1astv2lYs30y"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":460,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"ecLpVQnK5EI6G7mif+C9LP"},{"__type__":"cc.Node","_name":"title_3Sprite","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":false,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":12},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":464,"height":164},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"eb7yI4eWFI6rmqCFfPzVp9"},{"__type__":"cc.SpriteComponent","_name":"","_objFlags":0,"node":{"__id__":12},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"2e30d611-8e92-42e4-900d-a202965a1516@f9941"},"_type":0,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"8bJxkW/SJACpDMmigmMJ6F"},{"__type__":"cc.WidgetComponent","_name":"Sprite-004<WidgetComponent>","_objFlags":0,"node":{"__id__":12},"_enabled":true,"_alignFlags":17,"_target":null,"_left":0,"_right":0,"_top":290.40999999999997,"_bottom":0,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":0,"_alignMode":2,"_lockFlags":0,"_id":"0cLPZ9qVpIfotFgiKDiy3K"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":267.59000000000003,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"60x354kSBM1LTv7BIO8bbZ"},{"__type__":"cc.Node","_name":"startButton","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":13},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":372,"height":112},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"56hLIE+EtLM6Wk1aop0HXp"},{"__type__":"cc.SpriteComponent","_name":"","_objFlags":0,"node":{"__id__":13},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"d431b45b-6f01-40e7-9137-2edf334e83ff@f9941"},"_type":1,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"0erjq3zN1Lo7RL8YyfQITr"},{"__type__":"cc.WidgetComponent","_name":"Button<WidgetComponent>","_objFlags":0,"node":{"__id__":13},"_enabled":true,"_alignFlags":20,"_target":null,"_left":0,"_right":0,"_top":0,"_bottom":200,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":0,"_alignMode":2,"_lockFlags":0,"_id":"54kb5yYGxGuYaR9MsGSVCf"},{"__id__":14}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":-384,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"fc5eoieLdD/bB+tCLoJH8o"},{"__type__":"cc.ButtonComponent","_name":"","_objFlags":0,"node":{"__id__":13},"_enabled":true,"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":15},"component":"","_componentId":"e22ef+ZVatIcLMSjDz1ugIu","handler":"startGame","customEventData":""}],"_interactable":true,"_transition":2,"_normalColor":{"__type__":"cc.Color","r":214,"g":214,"b":214,"a":255},"_hoverColor":{"__type__":"cc.Color","r":211,"g":211,"b":211,"a":255},"_pressColor":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_disabledColor":{"__type__":"cc.Color","r":124,"g":124,"b":124,"a":255},"_normalSprite":{"__uuid__":"d431b45b-6f01-40e7-9137-2edf334e83ff@f9941"},"_hoverSprite":{"__uuid__":"7435d25b-69f3-4f61-9e15-31c5acb20f2f@f9941"},"_pressedSprite":{"__uuid__":"7435d25b-69f3-4f61-9e15-31c5acb20f2f@f9941"},"_disabledSprite":{"__uuid__":"7435d25b-69f3-4f61-9e15-31c5acb20f2f@f9941"},"_duration":0.1,"_zoomScale":1.2,"_target":{"__id__":13},"_id":"969/E+nslHvaJJfD+98S0Z"},{"__type__":"cc.Node","_name":"diceNode","_objFlags":0,"_parent":{"__id__":16},"_children":[{"__id__":19},{"__id__":20},{"__id__":21},{"__id__":22},{"__id__":23},{"__id__":24}],"_active":true,"_components":[{"__type__":"e22ef+ZVatIcLMSjDz1ugIu","_name":"diceNode<MainGame>","_objFlags":0,"node":{"__id__":15},"_enabled":true,"dice1":{"__id__":19},"dice2":{"__id__":20},"dice3":{"__id__":21},"dice4":{"__id__":22},"dice5":{"__id__":23},"dice6":{"__id__":24},"bowlMeshCollider":{"__id__":18},"startButton":{"__id__":14},"awordsLabel":{"__id__":25},"_id":"7eU44C2klLxKp7jbRZ1hTr"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":1.75,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"c5E7SHTdlGI4n5RNnaO807"},{"__type__":"cc.Node","_name":"sceneNode","_objFlags":0,"_parent":{"__id__":1},"_children":[{"__id__":15},{"__id__":17}],"_active":true,"_components":[],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"03aMxHzvVIAKdm0o0750dD"},{"__type__":"cc.Node","_name":"Bowl","_objFlags":0,"_parent":{"__id__":16},"_children":[],"_active":true,"_components":[{"__type__":"cc.ModelComponent","_name":"","_objFlags":0,"node":{"__id__":17},"_enabled":true,"_materials":[{"__uuid__":"b98c2985-9dff-445b-807d-032ffa3d5aa1"}],"_visFlags":0,"lightmapSettings":{"__type__":"cc.ModelLightmapSettings","texture":null,"uvParam":{"__type__":"cc.Vec4","x":0,"y":0,"z":0,"w":0},"_bakeable":false,"_castShadow":false,"_receiveShadow":false,"_recieveShadow":false,"_lightmapSize":64},"_mesh":{"__uuid__":"8c8fbe8d-0bbb-4a30-99d9-99804cd380a7@87c5f"},"_shadowCastingMode":0,"_enableMorph":true,"_id":"5cbPDITqlDFqabSRpV49S5"},{"__id__":18},{"__type__":"cc.AnimationComponent","_name":"","_objFlags":0,"node":{"__id__":17},"_enabled":true,"playOnLoad":false,"_clips":[{"__uuid__":"285df332-e902-41a1-8ae6-af99e8708f8c"}],"_defaultClip":{"__uuid__":"285df332-e902-41a1-8ae6-af99e8708f8c"},"_id":"8eUT/bbBJIWJk42Jz4Q1J6"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":5,"y":5,"z":5},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"2345T9Zp1NKY5cndKEquRt"},{"__type__":"cc.MeshColliderComponent","_name":"","_objFlags":0,"node":{"__id__":17},"_enabled":true,"_material":{"__uuid__":"a00ee4d7-ad4f-4c24-8d67-762d4eabacd5"},"_isTrigger":false,"_center":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_mesh":{"__uuid__":"8c8fbe8d-0bbb-4a30-99d9-99804cd380a7@87c5f"},"_id":"28dkTY8zhLzKuE/aHWZr7F"},{"__type__":"cc.Node","_name":"dice1","_objFlags":0,"_parent":{"__id__":15},"_children":[],"_active":true,"_components":[{"__type__":"cc.ModelComponent","_name":"","_objFlags":0,"node":{"__id__":19},"_enabled":true,"_materials":[{"__uuid__":"ca1bab1f-2c1a-47da-a727-8db6c8feed90"}],"_visFlags":0,"lightmapSettings":{"__type__":"cc.ModelLightmapSettings","texture":null,"uvParam":{"__type__":"cc.Vec4","x":0,"y":0,"z":0,"w":0},"_bakeable":false,"_castShadow":false,"_receiveShadow":false,"_recieveShadow":false,"_lightmapSize":64},"_mesh":{"__uuid__":"d4e84cb5-fe11-4a86-a07a-85325a93d3a0@2f6d1"},"_shadowCastingMode":0,"_enableMorph":true,"_id":"16PqbPPJ5N957x0kN8kEdZ"},{"__type__":"cc.BoxColliderComponent","_name":"","_objFlags":0,"node":{"__id__":19},"_enabled":true,"_material":{"__uuid__":"a00ee4d7-ad4f-4c24-8d67-762d4eabacd5"},"_isTrigger":false,"_center":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_size":{"__type__":"cc.Vec3","x":0.15999996662139893,"y":0.15999996662139893,"z":0.15999996662139893},"_id":"f66vZu+MxH/6LyR7xeIuq3"},{"__type__":"cc.RigidBodyComponent","_name":"","_objFlags":0,"node":{"__id__":19},"_enabled":true,"_mass":10,"_linearDamping":0,"_angularDamping":0,"_fixedRotation":true,"_isKinematic":false,"_useGravity":false,"_linearFactor":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_angularFactor":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"a1+qMTjZhCBav61uMjBR/Q"},{"__type__":"cc.AnimationComponent","_name":"test1<AnimationComponent>","_objFlags":0,"node":{"__id__":19},"_enabled":true,"playOnLoad":false,"_clips":[{"__uuid__":"10b254d8-62f6-45b7-9572-0b9b5f973959"},{"__uuid__":"449acfe9-d46a-45e8-b238-2e70bc0bc5dc"},{"__uuid__":"9f8304af-02b0-43e1-8d43-498dc52405ce"},{"__uuid__":"0ad955d2-c94d-4fd8-b20a-bc19626afc1f"},{"__uuid__":"90175092-d9cf-4319-b8c8-3e8a858b71d0"},{"__uuid__":"264c4e38-4a8f-4cb1-823c-13f6ba78d6ce"}],"_defaultClip":null,"_id":"d73EzNun1BY7Glq74x/x7G"},null],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":-0.5,"y":0,"z":0},"_lrot":{"__type__":"cc.Quat","x":0.3535533905932738,"y":0.14644660940672624,"z":0.3535533905932738,"w":0.8535533905932737},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":45,"y":0,"z":45},"_id":"7eaBxNGAdCaLKSG8PKQXlO"},{"__type__":"cc.Node","_name":"dice2","_objFlags":0,"_parent":{"__id__":15},"_children":[],"_active":true,"_components":[{"__type__":"cc.ModelComponent","_name":"","_objFlags":0,"node":{"__id__":20},"_enabled":true,"_materials":[{"__uuid__":"ca1bab1f-2c1a-47da-a727-8db6c8feed90"}],"_visFlags":0,"lightmapSettings":{"__type__":"cc.ModelLightmapSettings","texture":null,"uvParam":{"__type__":"cc.Vec4","x":0,"y":0,"z":0,"w":0},"_bakeable":false,"_castShadow":false,"_receiveShadow":false,"_recieveShadow":false,"_lightmapSize":64},"_mesh":{"__uuid__":"d4e84cb5-fe11-4a86-a07a-85325a93d3a0@2f6d1"},"_shadowCastingMode":0,"_enableMorph":true,"_id":"33FDnAoIFEvKplsDXccZwp"},{"__type__":"cc.BoxColliderComponent","_name":"","_objFlags":0,"node":{"__id__":20},"_enabled":true,"_material":{"__uuid__":"a00ee4d7-ad4f-4c24-8d67-762d4eabacd5"},"_isTrigger":false,"_center":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_size":{"__type__":"cc.Vec3","x":0.15999996662139893,"y":0.15999996662139893,"z":0.15999996662139893},"_id":"44TO6XefRAsZlWynwNGtBl"},{"__type__":"cc.RigidBodyComponent","_name":"","_objFlags":0,"node":{"__id__":20},"_enabled":true,"_mass":10,"_linearDamping":0,"_angularDamping":0,"_fixedRotation":true,"_isKinematic":false,"_useGravity":false,"_linearFactor":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_angularFactor":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"2bis0UTvRD6bnH282djX4v"},{"__type__":"cc.AnimationComponent","_name":"","_objFlags":0,"node":{"__id__":20},"_enabled":true,"playOnLoad":false,"_clips":[{"__uuid__":"10b254d8-62f6-45b7-9572-0b9b5f973959"},{"__uuid__":"449acfe9-d46a-45e8-b238-2e70bc0bc5dc"},{"__uuid__":"9f8304af-02b0-43e1-8d43-498dc52405ce"},{"__uuid__":"0ad955d2-c94d-4fd8-b20a-bc19626afc1f"},{"__uuid__":"90175092-d9cf-4319-b8c8-3e8a858b71d0"},{"__uuid__":"264c4e38-4a8f-4cb1-823c-13f6ba78d6ce"}],"_defaultClip":null,"_id":"bcRxlWUlhIU5K/3Qu6agaN"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_lrot":{"__type__":"cc.Quat","x":-0.3535533905932738,"y":0.14644660940672624,"z":-0.3535533905932738,"w":0.8535533905932737},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":-45,"y":0,"z":-45},"_id":"a6xFY6QcJA4ZTrRaIYcPom"},{"__type__":"cc.Node","_name":"dice3","_objFlags":0,"_parent":{"__id__":15},"_children":[],"_active":true,"_components":[{"__type__":"cc.ModelComponent","_name":"","_objFlags":0,"node":{"__id__":21},"_enabled":true,"_materials":[{"__uuid__":"ca1bab1f-2c1a-47da-a727-8db6c8feed90"}],"_visFlags":0,"lightmapSettings":{"__type__":"cc.ModelLightmapSettings","texture":null,"uvParam":{"__type__":"cc.Vec4","x":0,"y":0,"z":0,"w":0},"_bakeable":false,"_castShadow":false,"_receiveShadow":false,"_recieveShadow":false,"_lightmapSize":64},"_mesh":{"__uuid__":"d4e84cb5-fe11-4a86-a07a-85325a93d3a0@2f6d1"},"_shadowCastingMode":0,"_enableMorph":true,"_id":"394Kg6kYJI+rJp2dHeMIn4"},{"__type__":"cc.BoxColliderComponent","_name":"","_objFlags":0,"node":{"__id__":21},"_enabled":true,"_material":{"__uuid__":"a00ee4d7-ad4f-4c24-8d67-762d4eabacd5"},"_isTrigger":false,"_center":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_size":{"__type__":"cc.Vec3","x":0.15999996662139893,"y":0.15999996662139893,"z":0.15999996662139893},"_id":"69SN57XtJNjKo7+OpHsiDp"},{"__type__":"cc.RigidBodyComponent","_name":"","_objFlags":0,"node":{"__id__":21},"_enabled":true,"_mass":10,"_linearDamping":0,"_angularDamping":0,"_fixedRotation":true,"_isKinematic":false,"_useGravity":false,"_linearFactor":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_angularFactor":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"89XRGRXsBNf6wcn4Bgiahn"},{"__type__":"cc.AnimationComponent","_name":"","_objFlags":0,"node":{"__id__":21},"_enabled":true,"playOnLoad":false,"_clips":[{"__uuid__":"10b254d8-62f6-45b7-9572-0b9b5f973959"},{"__uuid__":"449acfe9-d46a-45e8-b238-2e70bc0bc5dc"},{"__uuid__":"9f8304af-02b0-43e1-8d43-498dc52405ce"},{"__uuid__":"0ad955d2-c94d-4fd8-b20a-bc19626afc1f"},{"__uuid__":"90175092-d9cf-4319-b8c8-3e8a858b71d0"},{"__uuid__":"264c4e38-4a8f-4cb1-823c-13f6ba78d6ce"}],"_defaultClip":null,"_id":"8dBuh4p8dKoo8Z7ianfer4"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0.5,"y":0,"z":0},"_lrot":{"__type__":"cc.Quat","x":0.3535533905932738,"y":0.14644660940672624,"z":0.3535533905932738,"w":0.8535533905932737},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":45,"y":0,"z":45},"_id":"e8ulkT82lHnJKOiLkgpnmy"},{"__type__":"cc.Node","_name":"dice4","_objFlags":0,"_parent":{"__id__":15},"_children":[],"_active":true,"_components":[{"__type__":"cc.ModelComponent","_name":"test7<ModelComponent>","_objFlags":0,"node":{"__id__":22},"_enabled":true,"_materials":[{"__uuid__":"ca1bab1f-2c1a-47da-a727-8db6c8feed90"}],"_visFlags":0,"lightmapSettings":{"__type__":"cc.ModelLightmapSettings","texture":null,"uvParam":{"__type__":"cc.Vec4","x":0,"y":0,"z":0,"w":0},"_bakeable":false,"_castShadow":false,"_receiveShadow":false,"_recieveShadow":false,"_lightmapSize":64},"_mesh":{"__uuid__":"d4e84cb5-fe11-4a86-a07a-85325a93d3a0@2f6d1"},"_shadowCastingMode":0,"_enableMorph":true,"_id":"886Mlm20BP879AXHdtYPwE"},{"__type__":"cc.BoxColliderComponent","_name":"test7<BoxColliderComponent>","_objFlags":0,"node":{"__id__":22},"_enabled":true,"_material":{"__uuid__":"a00ee4d7-ad4f-4c24-8d67-762d4eabacd5"},"_isTrigger":false,"_center":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_size":{"__type__":"cc.Vec3","x":0.15999996662139893,"y":0.15999996662139893,"z":0.15999996662139893},"_id":"e5eF0za5lFyZJ81HQHEuuV"},{"__type__":"cc.RigidBodyComponent","_name":"test7<RigidBodyComponent>","_objFlags":0,"node":{"__id__":22},"_enabled":true,"_mass":10,"_linearDamping":0,"_angularDamping":0,"_fixedRotation":true,"_isKinematic":false,"_useGravity":false,"_linearFactor":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_angularFactor":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"c6A2B2rGBA+4+v9t1j77+d"},{"__type__":"cc.AnimationComponent","_name":"","_objFlags":0,"node":{"__id__":22},"_enabled":true,"playOnLoad":false,"_clips":[{"__uuid__":"10b254d8-62f6-45b7-9572-0b9b5f973959"},{"__uuid__":"449acfe9-d46a-45e8-b238-2e70bc0bc5dc"},{"__uuid__":"9f8304af-02b0-43e1-8d43-498dc52405ce"},{"__uuid__":"0ad955d2-c94d-4fd8-b20a-bc19626afc1f"},{"__uuid__":"90175092-d9cf-4319-b8c8-3e8a858b71d0"},{"__uuid__":"264c4e38-4a8f-4cb1-823c-13f6ba78d6ce"}],"_defaultClip":null,"_id":"fb3sL4k1NCz4BvyNi+XDKr"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":-0.5,"y":0,"z":0.3},"_lrot":{"__type__":"cc.Quat","x":-0.3535533905932738,"y":0.14644660940672624,"z":-0.3535533905932738,"w":0.8535533905932737},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":-45,"y":0,"z":-45},"_id":"286w4pONhGK7BsfyrVJCzZ"},{"__type__":"cc.Node","_name":"dice5","_objFlags":0,"_parent":{"__id__":15},"_children":[],"_active":true,"_components":[{"__type__":"cc.ModelComponent","_name":"","_objFlags":0,"node":{"__id__":23},"_enabled":true,"_materials":[{"__uuid__":"ca1bab1f-2c1a-47da-a727-8db6c8feed90"}],"_visFlags":0,"lightmapSettings":{"__type__":"cc.ModelLightmapSettings","texture":null,"uvParam":{"__type__":"cc.Vec4","x":0,"y":0,"z":0,"w":0},"_bakeable":false,"_castShadow":false,"_receiveShadow":false,"_recieveShadow":false,"_lightmapSize":64},"_mesh":{"__uuid__":"d4e84cb5-fe11-4a86-a07a-85325a93d3a0@2f6d1"},"_shadowCastingMode":0,"_enableMorph":true,"_id":"1dDkKsiLVAFZ7qcIGi1xP3"},{"__type__":"cc.BoxColliderComponent","_name":"","_objFlags":0,"node":{"__id__":23},"_enabled":true,"_material":{"__uuid__":"a00ee4d7-ad4f-4c24-8d67-762d4eabacd5"},"_isTrigger":false,"_center":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_size":{"__type__":"cc.Vec3","x":0.15999996662139893,"y":0.15999996662139893,"z":0.15999996662139893},"_id":"b9es8c9HJNu7Me7u3MRsFk"},{"__type__":"cc.RigidBodyComponent","_name":"","_objFlags":0,"node":{"__id__":23},"_enabled":true,"_mass":10,"_linearDamping":0,"_angularDamping":0,"_fixedRotation":true,"_isKinematic":false,"_useGravity":false,"_linearFactor":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_angularFactor":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"b5/iQb66NA4oWmJon3DcZ0"},{"__type__":"cc.AnimationComponent","_name":"","_objFlags":0,"node":{"__id__":23},"_enabled":true,"playOnLoad":false,"_clips":[{"__uuid__":"10b254d8-62f6-45b7-9572-0b9b5f973959"},{"__uuid__":"449acfe9-d46a-45e8-b238-2e70bc0bc5dc"},{"__uuid__":"9f8304af-02b0-43e1-8d43-498dc52405ce"},{"__uuid__":"0ad955d2-c94d-4fd8-b20a-bc19626afc1f"},{"__uuid__":"90175092-d9cf-4319-b8c8-3e8a858b71d0"},{"__uuid__":"264c4e38-4a8f-4cb1-823c-13f6ba78d6ce"}],"_defaultClip":null,"_id":"5eu9a3DMxCjrVW1El+hV22"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":0,"z":0.3},"_lrot":{"__type__":"cc.Quat","x":0.3535533905932738,"y":0.14644660940672624,"z":0.3535533905932738,"w":0.8535533905932737},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":45,"y":0,"z":45},"_id":"54bqSy7HJJ5Iusr8Zg2H56"},{"__type__":"cc.Node","_name":"dice6","_objFlags":0,"_parent":{"__id__":15},"_children":[],"_active":true,"_components":[{"__type__":"cc.ModelComponent","_name":"","_objFlags":0,"node":{"__id__":24},"_enabled":true,"_materials":[{"__uuid__":"ca1bab1f-2c1a-47da-a727-8db6c8feed90"}],"_visFlags":0,"lightmapSettings":{"__type__":"cc.ModelLightmapSettings","texture":null,"uvParam":{"__type__":"cc.Vec4","x":0,"y":0,"z":0,"w":0},"_bakeable":false,"_castShadow":false,"_receiveShadow":false,"_recieveShadow":false,"_lightmapSize":64},"_mesh":{"__uuid__":"d4e84cb5-fe11-4a86-a07a-85325a93d3a0@2f6d1"},"_shadowCastingMode":0,"_enableMorph":true,"_id":"9aExkR8uVPh77NAGWspUOh"},{"__type__":"cc.BoxColliderComponent","_name":"","_objFlags":0,"node":{"__id__":24},"_enabled":true,"_material":{"__uuid__":"a00ee4d7-ad4f-4c24-8d67-762d4eabacd5"},"_isTrigger":false,"_center":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_size":{"__type__":"cc.Vec3","x":0.15999996662139893,"y":0.15999996662139893,"z":0.15999996662139893},"_id":"5dslKxVlhLLK75K5rMdbPa"},{"__type__":"cc.RigidBodyComponent","_name":"","_objFlags":0,"node":{"__id__":24},"_enabled":true,"_mass":10,"_linearDamping":0,"_angularDamping":0,"_fixedRotation":true,"_isKinematic":false,"_useGravity":false,"_linearFactor":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_angularFactor":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"b1UcXdASBEgrmc2G/CTtZ2"},{"__type__":"cc.AnimationComponent","_name":"","_objFlags":0,"node":{"__id__":24},"_enabled":true,"playOnLoad":false,"_clips":[{"__uuid__":"10b254d8-62f6-45b7-9572-0b9b5f973959"},{"__uuid__":"449acfe9-d46a-45e8-b238-2e70bc0bc5dc"},{"__uuid__":"9f8304af-02b0-43e1-8d43-498dc52405ce"},{"__uuid__":"0ad955d2-c94d-4fd8-b20a-bc19626afc1f"},{"__uuid__":"90175092-d9cf-4319-b8c8-3e8a858b71d0"},{"__uuid__":"264c4e38-4a8f-4cb1-823c-13f6ba78d6ce"}],"_defaultClip":null,"_id":"1de6JbvPpMZ5PVk6b7dFiT"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0.5,"y":0,"z":0.3},"_lrot":{"__type__":"cc.Quat","x":-0.3535533905932738,"y":0.14644660940672624,"z":-0.3535533905932738,"w":0.8535533905932737},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":-45,"y":0,"z":-45},"_id":"aec7KtBttEk7M3sxp2XOuq"},{"__type__":"cc.Node","_name":"awordsLabel","_objFlags":0,"_parent":{"__id__":5},"_children":[{"__id__":26}],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"awordsLabel<UITransformComponent>","_objFlags":0,"node":{"__id__":25},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":168,"height":100.8},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"16woCj9LNG5ai27D3qKL/6"},{"__type__":"cc.WidgetComponent","_name":"Label<WidgetComponent>","_objFlags":0,"node":{"__id__":25},"_enabled":true,"_alignFlags":17,"_target":null,"_left":0,"_right":0,"_top":314.73400000000004,"_bottom":0,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":0,"_alignMode":2,"_lockFlags":0,"_id":"e9OZW8g3BE3aGLGOJenV5o"},{"__type__":"cc.RichTextComponent","_name":"awordsLabel<RichTextComponent>","_objFlags":0,"node":{"__id__":25},"_enabled":true,"_lineHeight":80,"_string":"<b><outline color=#b8860b width=4><color=yellow>对堂</color></outline></b>","_horizontalAlign":1,"_fontSize":80,"_maxWidth":0,"_font":null,"_imageAtlas":null,"_handleTouchEvent":true,"_id":"8auXWdx2JNV6kwI7GXXvFF"},{"__type__":"cc.AnimationComponent","_name":"Label<AnimationComponent>","_objFlags":0,"node":{"__id__":25},"_enabled":true,"playOnLoad":false,"_clips":[{"__uuid__":"c8e2e6d5-bdfc-4529-a44a-775d586d680f"}],"_defaultClip":{"__uuid__":"c8e2e6d5-bdfc-4529-a44a-775d586d680f"},"_id":"a8gyFJsMFK5r0Fz9jwXBM+"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":274.866,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"6dHJofHOJFjYi4+cvVOwT3"},{"__type__":"cc.PrivateNode","_name":"RICHTEXT_CHILD","_objFlags":1024,"_parent":{"__id__":25},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":26},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":168,"height":100.8},"_anchorPoint":{"__type__":"cc.Vec2","x":0,"y":0},"_id":"29120qb1FB87NRnNX7Y/Tm"},{"__type__":"cc.LabelComponent","_name":"","_objFlags":0,"node":{"__id__":26},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":0,"a":255},"_sharedMaterial":null,"_useOriginalSize":true,"_string":"对堂","_horizontalAlign":0,"_verticalAlign":1,"_actualFontSize":80,"_fontSize":80,"_fontFamily":"Arial","_lineHeight":80,"_overflow":0,"_enableWrapText":true,"_font":null,"_isSystemFontUsed":true,"_isItalic":false,"_isBold":true,"_isUnderline":false,"_cacheMode":0,"_id":"56o23nnR9F0Z8GlK/io5G0"},{"__type__":"cc.LabelOutlineComponent","_name":"","_objFlags":0,"node":{"__id__":26},"_enabled":true,"_color":{"__type__":"cc.Color","r":184,"g":134,"b":11,"a":255},"_width":4,"_id":"d925S1eLBGFa37m+uJ6Te5"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":-84,"y":-50.4,"z":0},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"1bpl7hABtEz76vOkyTowk4"},{"__type__":"cc.Node","_name":"rulesButton","_objFlags":0,"_parent":{"__id__":5},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":27},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":139,"height":144},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"66sHr0LBNCUI6vCOxGFe4H"},{"__type__":"cc.SpriteComponent","_name":"","_objFlags":0,"node":{"__id__":27},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"e3303a0b-4bbb-4cca-9410-aef933e70ab6@f9941"},"_type":1,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"8aHEVKwKNKe4BpXE3jt3WI"},{"__type__":"cc.ButtonComponent","_name":"","_objFlags":0,"node":{"__id__":27},"_enabled":true,"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":28},"component":"","_componentId":"0a799UedPpL/LKG7FKEZKXl","handler":"openRuels","customEventData":""}],"_interactable":true,"_transition":2,"_normalColor":{"__type__":"cc.Color","r":214,"g":214,"b":214,"a":255},"_hoverColor":{"__type__":"cc.Color","r":211,"g":211,"b":211,"a":255},"_pressColor":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_disabledColor":{"__type__":"cc.Color","r":124,"g":124,"b":124,"a":255},"_normalSprite":{"__uuid__":"e3303a0b-4bbb-4cca-9410-aef933e70ab6@f9941"},"_hoverSprite":{"__uuid__":"e3303a0b-4bbb-4cca-9410-aef933e70ab6@f9941"},"_pressedSprite":{"__uuid__":"e3303a0b-4bbb-4cca-9410-aef933e70ab6@f9941"},"_disabledSprite":{"__uuid__":"e3303a0b-4bbb-4cca-9410-aef933e70ab6@f9941"},"_duration":0.1,"_zoomScale":1.2,"_target":{"__id__":27},"_id":"9dNbFQhDpEd7bJ3UUDCeh1"},{"__type__":"cc.WidgetComponent","_name":"Button<WidgetComponent>","_objFlags":0,"node":{"__id__":27},"_enabled":true,"_alignFlags":12,"_target":null,"_left":46.523000000000025,"_right":0,"_top":1152,"_bottom":152.04399999999998,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":0,"_alignMode":2,"_lockFlags":0,"_id":"95Olca+LNBjYr+NjSUquaU"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":-278.727,"y":-451.956,"z":-2},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":0.5,"y":0.5,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"0dbTw8bqRLALUBGiaQY5e7"},{"__type__":"cc.Node","_name":"Node","_objFlags":0,"_parent":{"__id__":29},"_children":[{"__id__":30},{"__id__":31}],"_active":false,"_components":[{"__type__":"cc.UITransformComponent","_name":"Node<UITransformComponent>","_objFlags":0,"node":{"__id__":28},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":720,"height":1280},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"famavsV3lA/6mWIGPho5ot"},{"__type__":"0a799UedPpL/LKG7FKEZKXl","_name":"","_objFlags":0,"node":{"__id__":28},"_enabled":true,"_id":"a5VhGoZ6lEVr3bC2/No9kc"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":0,"z":-1},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":1073741824,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"648fUW3alIya650pH3PzP1"},{"__type__":"cc.Node","_name":"Canvas","_objFlags":0,"_parent":{"__id__":1},"_children":[{"__id__":28}],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"","_objFlags":0,"node":{"__id__":29},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":720,"height":1280},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"524ZxwYuhLl4i+60+q3tib"},{"__type__":"cc.CanvasComponent","_name":"","_objFlags":0,"node":{"__id__":29},"_enabled":true,"_priority":0,"_targetTexture":null,"_clearFlag":0,"_color":{"__type__":"cc.Color","r":0,"g":0,"b":0,"a":0},"_renderMode":0,"_id":"d2HtMCua9HubR1h7LcmIoJ"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":360,"y":640,"z":1},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":1,"y":1,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"81PyND5plPuI2oJjitl6GB"},{"__type__":"cc.Node","_name":"rulesSprite","_objFlags":0,"_parent":{"__id__":28},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"Sprite-005<UITransformComponent>","_objFlags":0,"node":{"__id__":30},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":979,"height":1532},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"9fMjMUpPFMSKY/XLpvSafQ"},{"__type__":"cc.SpriteComponent","_name":"Sprite-005<SpriteComponent>","_objFlags":0,"node":{"__id__":30},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"2e4f4a16-762c-45b6-9729-fe323ed3bed9@f9941"},"_type":0,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"5c6rbpizVDc7xtuKNMNxMs"},{"__type__":"cc.WidgetComponent","_name":"Sprite-004<WidgetComponent>","_objFlags":0,"node":{"__id__":30},"_enabled":true,"_alignFlags":18,"_target":null,"_left":0,"_right":0,"_top":38,"_bottom":0,"_horizontalCenter":0,"_verticalCenter":12.677999999999997,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":0,"_alignMode":2,"_lockFlags":0,"_id":"31opAsXptDJ70mwGSAcris"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":0,"y":12.677999999999997,"z":-1},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":0.7,"y":0.7,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"deLQlShc9HPoAFQz2OIDmQ"},{"__type__":"cc.Node","_name":"closeButton","_objFlags":0,"_parent":{"__id__":28},"_children":[],"_active":true,"_components":[{"__type__":"cc.UITransformComponent","_name":"Button-003<UITransformComponent>","_objFlags":0,"node":{"__id__":31},"_enabled":true,"_priority":0,"_contentSize":{"__type__":"cc.Size","width":139,"height":144},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"_id":"f8Nfo3didOhL6BJ+qpkqaV"},{"__type__":"cc.SpriteComponent","_name":"Button-003<SpriteComponent>","_objFlags":0,"node":{"__id__":31},"_enabled":true,"_srcBlendFactor":2,"_dstBlendFactor":4,"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":0},"_sharedMaterial":null,"_spriteFrame":{"__uuid__":"4a6cb447-ace8-480a-adda-58cdd409671d@f9941"},"_type":1,"_fillType":0,"_sizeMode":0,"_fillCenter":{"__type__":"cc.Vec2","x":0,"y":0},"_fillStart":0,"_fillRange":0,"_isTrimmedMode":true,"_useGrayscale":false,"_atlas":null,"_id":"2aUo5gXNhIJbMC8Asl9P5B"},{"__type__":"cc.ButtonComponent","_name":"Button-003<ButtonComponent>","_objFlags":0,"node":{"__id__":31},"_enabled":true,"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":28},"component":"","_componentId":"0a799UedPpL/LKG7FKEZKXl","handler":"closeRuels","customEventData":"close"}],"_interactable":true,"_transition":2,"_normalColor":{"__type__":"cc.Color","r":214,"g":214,"b":214,"a":255},"_hoverColor":{"__type__":"cc.Color","r":211,"g":211,"b":211,"a":255},"_pressColor":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":255},"_disabledColor":{"__type__":"cc.Color","r":124,"g":124,"b":124,"a":255},"_normalSprite":{"__uuid__":"4a6cb447-ace8-480a-adda-58cdd409671d@f9941"},"_hoverSprite":{"__uuid__":"4a6cb447-ace8-480a-adda-58cdd409671d@f9941"},"_pressedSprite":{"__uuid__":"4a6cb447-ace8-480a-adda-58cdd409671d@f9941"},"_disabledSprite":{"__uuid__":"4a6cb447-ace8-480a-adda-58cdd409671d@f9941"},"_duration":0.1,"_zoomScale":1.2,"_target":{"__id__":31},"_id":"c4uYjnb4hAiLlPXi8OCG9z"},{"__type__":"cc.WidgetComponent","_name":"Button<WidgetComponent>","_objFlags":0,"node":{"__id__":31},"_enabled":true,"_alignFlags":33,"_target":null,"_left":344,"_right":1.2699999999999818,"_top":152.41199999999992,"_bottom":116,"_horizontalCenter":0,"_verticalCenter":0,"_isAbsLeft":true,"_isAbsRight":true,"_isAbsTop":true,"_isAbsBottom":true,"_isAbsHorizontalCenter":true,"_isAbsVerticalCenter":true,"_originalWidth":0,"_originalHeight":144,"_alignMode":2,"_lockFlags":0,"_id":"5bIj+F1yJB5Zou13CFsEsV"}],"_prefab":null,"_lpos":{"__type__":"cc.Vec3","x":310.08000000000004,"y":437.1880000000001,"z":-3},"_lrot":{"__type__":"cc.Quat","x":0,"y":0,"z":0,"w":1},"_lscale":{"__type__":"cc.Vec3","x":0.7,"y":0.7,"z":1},"_layer":33554432,"_euler":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"_id":"9frhaHvvhAJ4BqUTKSW9s7"}],{"__type__":"cc.Material","_name":"","_objFlags":0,"_native":"","_effectAsset":{"__uuid__":"1baf0fc9-befa-459c-8bdd-af1a450a0319"},"_techIdx":0,"_defines":[{"USE_ALBEDO_MAP":true}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"emissiveScale":{"__type__":"cc.Vec3","x":0,"y":0,"z":0},"mainTexture":{"__uuid__":"27d35182-24ce-4ae4-8306-1a4109ff22bd@6c48a"},"normalMap":{"__uuid__":"27d35182-24ce-4ae4-8306-1a4109ff22bd@6c48a"},"occlusionMap":{"__uuid__":"8c8fbe8d-0bbb-4a30-99d9-99804cd380a7@9b633"}}]},{"__type__":"cc.AnimationClip","_name":"animation_Awards","_objFlags":0,"_native":"","sample":60,"speed":1,"wrapMode":1,"events":[],"_duration":0.5,"_keys":[[0,0.26666666666666666,0.5]],"_stepness":0,"_curves":[{"modifiers":["scale"],"data":{"keys":0,"values":[{"__type__":"cc.Vec3","x":0,"y":0,"z":0},{"__type__":"cc.Vec3","x":1.2,"y":1.2,"z":0},{"__type__":"cc.Vec3","x":1,"y":1,"z":1}],"easingMethods":{"0":"quintIn"}}}],"_commonTargets":[],"_hash":2752889627},{"__type__":"cc.SpriteFrame","content":{"name":"bg","atlas":"","rect":{"x":0,"y":0,"width":750,"height":1334},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":1334},"rotated":false,"capInsets":[0,0,0,0],"texture":"c6319984-cd3c-4609-a4e9-34bc6c54b8cc@6c48a"}},{"__type__":"cc.Material","_name":"","_objFlags":0,"_native":"","_effectAsset":{"__uuid__":"a3cd009f-0ab0-420d-9278-b9fdab939bbc"},"_techIdx":0,"_defines":[{"USE_TEXTURE":true}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"mainTexture":{"__uuid__":"5d7896f8-f2f0-4f51-9898-80e97f97d093@6c48a"}}]},{"__type__":"cc.Mesh","_name":"","_objFlags":0,"_native":".bin","_struct":{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":43,"isNormalized":false}]}],"minPosition":{"__type__":"cc.Vec3","x":-0.07999998331069946,"y":-0.07999998331069946,"z":-0.07999998331069946},"maxPosition":{"__type__":"cc.Vec3","x":0.07999998331069946,"y":0.07999998331069946,"z":0.07999998331069946}},"_dataLength":1224,"_hash":3688412834},{"__type__":"cc.SpriteFrame","content":{"name":"startGame_1","atlas":"","rect":{"x":0,"y":0,"width":372,"height":112},"offset":{"x":0,"y":0},"originalSize":{"width":372,"height":112},"rotated":false,"capInsets":[0,0,0,0],"texture":"d431b45b-6f01-40e7-9137-2edf334e83ff@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"rules","atlas":"","rect":{"x":32,"y":32,"width":139,"height":144},"offset":{"x":1.5,"y":-4},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"e3303a0b-4bbb-4cca-9410-aef933e70ab6@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"branches_2","atlas":"","rect":{"x":0,"y":0,"width":479,"height":448},"offset":{"x":0,"y":0},"originalSize":{"width":479,"height":448},"rotated":false,"capInsets":[0,0,0,0],"texture":"ee58a173-3ae3-4860-b2a8-c744d0ef9c0d@6c48a"}}]
